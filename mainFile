import pygame
from pygame.math import Vector2

from baseForRRT import *
import time
img = pygame.image.load('png.png')

# class Entity(pygame.sprite.Sprite):
#
#     def __init__(self, pos, waypoints):
#         super().__init__()
#         self.image = pygame.transform.scale(img, (50, 50))
#         self.image = self.image.convert()
#         self.rect = self.image.get_rect(center=pos)
#         self.vel = Vector2(0, 0)
#         self.max_speed = 3
#         self.pos = Vector2(pos)
#         self.waypoints = waypoints
#         self.waypoint_index = 0
#         self.target = self.waypoints[self.waypoint_index]
#         self.target_radius = 100
#
#     def update(self):
#         # A vector pointing from self to the target.
#         heading = self.target - self.pos
#         distance = heading.length()  # Distance to the target.
#         heading.normalize_ip()
#         if distance <= 4:  # We're closer than 2 pixels.
#             # Increment the waypoint index to swtich the target.
#             # The modulo sets the index back to 0 if it's equal to the length.
#             self.waypoint_index = (self.waypoint_index + 1) % len(self.waypoints)
#             self.target = self.waypoints[self.waypoint_index]
#         if distance <= self.target_radius:
#             # If we're approaching the target, we slow down.
#             self.vel = heading * (distance / self.target_radius * self.max_speed)
#         else:  # Otherwise move with max_speed.
#             self.vel = heading * self.max_speed
#
#         self.pos += self.vel
#         self.rect.center = self.pos
def main():
    # stations
    station1 = (0, 245)
    station2 = (995, 245)
    station3 = (0, 495)
    station4 = (995, 495)
    station5 = (0, 745)
    station6 = (995,745)
    dimensions = (1000, 1000)
    start2 = (int(random.uniform(0,dimensions[0])), int(random.uniform(0,dimensions[1])))
    goal2 = (int(random.uniform(0,dimensions[0])), int(random.uniform(0,dimensions[1])))
    #goal = (200,200)
    # start1 = (501,0)
    #
    start1 = station1
    goal1 = station6
    obsdim = 100
    obsnum = 170
    iteration = 0
    t1 = 0
    # robot = Robot(start,
    #               r"C:\Users\Vincent Karimi\Desktop\project\gui\png.png",
    #               0.01 * 3779.52)
    pygame.init()
    # map1 = RRTMap(start, goal, dimensions, obsdim, obsnum)
    # graph1 = RRTGraph(start, goal, dimensions, obsdim, obsnum)
    map = RRTMap(start1, goal1, dimensions, obsdim, obsnum)
    graph = RRTGraph(start1, goal1, dimensions, obsdim, obsnum)
    obstacles = graph.makeobs()
    map.drawMap(obstacles)
    t1 = time.time()
    running  = graph.path_to_goal()
    while not graph.path_to_goal():
        time.sleep(0.0000000000005)
       # sprite1 = pygame.sprite.Group(Entity((39, 150), graph.getPathCoords()))
        elapsed = time.time() - t1
        t1 = time.time()
        # raise exception if timeout
        if elapsed > 20:
            print('timeout re-initiating the calculations')
            graph.path_to_goal()
            raise
        if iteration % 10 == 0:
            X, Y, Parent = graph.bias(goal1)
            #pygame.draw.circle(map.map, map.grey, (X[-1], Y[-1]), map.nodeRad * 2, 0)
            pygame.draw.line(map.map, map.Brick, (X[-1], Y[-1]), (X[Parent[-1]], Y[Parent[-1]]),
                             map.edgeThickness)
            #sprite1 = pygame.sprite.Group(Entity((39, 150), graph.getPathCoords()))
            #sprite1.update()
        else:
            X, Y, Parent = graph.expand()
            pygame.draw.circle(map.map, map.Brick, (X[-1], Y[-1]), map.nodeRad * 2, 0)
            pygame.draw.line(map.map, map.Brick, (X[-1], Y[-1]), (X[Parent[-1]], Y[Parent[-1]]),
                             map.edgeThickness)
        if iteration % 5 == 0:
            pygame.display.update()
        iteration += 1
        # for event in pygame.event.get():
        #     if event == pygame.QUIT:
        #         running = False
    map.drawPath(graph.getPathCoords())
    print(graph.getPathCoords())
    pathtoflow = graph.getPathCoords()
    #robot.drawRobot(map)
    pygame.display.update()
    pygame.event.wait(0)
    pygame.event.clear()
if __name__ == '__main__':

    result = False
    while not result:
        try:
            main()
            result = True
        except:
            result = False
